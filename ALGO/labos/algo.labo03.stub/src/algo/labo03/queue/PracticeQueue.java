package algo.labo03.queue;

import java.util.Deque;
import java.util.HashSet;
import java.util.Objects;
import java.util.Queue;
import java.util.Set;


public class PracticeQueue {

	/**
	 * Renvoie vrai si les deux files q1 et q2 ont le mÃªme contenu (mÃªmes Ã©lÃ©ments dans le mÃªme ordre)
	 * 
	 * N'oubliez pas d'implÃ©menter les propriÃ©tÃ©s suivantes (de java.lang.Object) :
	 * - RÃ©flexivitÃ©  (une file est Ã©gale Ã  elle-mÃªme)
	 * - TransitivitÃ© (deux files Ã©gales Ã  une mÃªme troisiÃ¨me sont Ã©gales entre elles)
	 * - SymÃ©trie (une file Ã©gale Ã  une autre 
	 * - Consistence (l'Ã©galitÃ© ne doit pas changer tant qu'une des deux files n'est pas modifiÃ©e) 
	 * - InÃ©galitÃ© Ã  null (une file et null ne sont pas Ã©gales)
	 * 
	 * @see Object Rappel des propriÃ©tÃ©s gÃ©nÃ©rales de equals
	 * @see java.util.Queue Pourquoi q1.equals(q2) ne fonctionnera pas ici ?
	 * @param q1 une premiÃ¨re file
	 * @param q2 une seconde file
	 * @return vrai si la file 1 et la file 2 ont le mÃªme contenu.
	 * ğŸŒŸ : 1
	 */
	public static boolean equals(final Queue<Integer> q1, final Queue<Integer> q2) {
		return false; // FIXME
	}
	
	/**
	 * Filtre tous les Ã©lÃ©ments de la file et ne laisse que les Ã©lÃ©ments pairs.
	 * Ces Ã©lÃ©ments doivent rester dans le mÃªme ordre.
	 * @param input
	 * @return
	 * ğŸŒŸ : 1
	 */
	public static Queue<Integer> even(final Queue<Integer> queue) {
		return null; // FIXME
	}
	
	/**
	 * Filtre tous les Ã©lÃ©ments de la file et ne laisse qu'une seule occurrence des Ã©lÃ©ments.
	 * @param queue
	 * @return
	 * ğŸŒŸ : 2
	 */
	public static Queue<String> unique(final Queue<String> queue) {
		return null; // FIXME
	}
}
